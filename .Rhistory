library(QuasarFitCuda)
m <- matrix(1:81, 9, 9)
m
library(QuasarFitCuda)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, -0.5)
cppMatrixAddScalar(m, -1.5)
cppMatrixAddScalar(m, -1000.5)
cppMatrixAddScalar(m, 1000.5)
cppMatrixAddScalar(m, -.5)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, 0.5)
m
m<-cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(m, 0.5)
m<-cppMatrixAddScalar(m, 0.5)
m<-cppMatrixAddScalar(m, 0.5)
m<-cppMatrixAddScalar(m, 0.5)
m
m <- 1:4096*300
length(m)
m <- 1:(4096*300)
length(m)
length(m) / 300
ma <- matrix(m, nrow = 4096, ncol = 300)
cppMatrixAddScalar(m, 0.5)
cppMatrixAddScalar(ma, 0.5)
length(cppMatrixAddScalar(ma, 0.5))
Sys.time()
m1 <- matrix(1:9, 3, 3)
m1 + 1
system.time(ma + 1)
system.time({ma + 1})
system.time({cppMatrixAddScalar(ma, 1)})
ma + 1
system.time({cppMatrixAddScalar(ma, 1)})
system.time({ma + 1})
ma <- matrix(1:(4096*1000), nrow = 4096, ncol = 1000)
system.time({ma + 1})
system.time({cppMatrixAddScalar(ma, 1)})
ma <- matrix(1:(4096*100000), nrow = 4096, ncol = 100000)
system.time({ma + 1})
system.time({cppMatrixAddScalar(ma, 1)})
system.time({cppMatrixAddScalar(ma, 1)})
mam <- cppMatrixAddScalar(ma, 1)
mam[1:3, 2:9]
ma[1:3, 2:9]
ma[1:3, 1:9]
mam[1:3, 1:9]
mam[1:3, 1:9]
ma[1:3, 1:9]
mam <- cppMatrixAddScalar(ma, 2.5)
ma[1:3, 1:9]
mam[1:3, 1:9]
mam1 <- ma + 2.5
mam1[1:3, 1:9]
mat <- matrix(1:9, 3, 3)
cppMatrixAddScalar(mat, 2.5)
cppMatrixAddScalar(ma, 2.5)
cppMatrixAddScalar(ma, 2.5)[1:3, 2:9]
library(QuasarFitCuda)
m1 <- matrix(1:9, 3, 3)
m2 <- matrix(seq(1, 9), 3, 3)
m2
m2 <- matrix(rep(1, 9), 3, 3)
m2
cppMatrixMinusMatrix(m1, m2)
library(QuasarFitCuda)
cppMatrixMinusMatrix(m1, m2)
m1
library(QuasarFitCuda)
library(QuasarFitCuda)
cppMatrixMinusMatrix(m1, m2)
library(QuasarFitCuda)
cppMatrixMinusMatrix(m1, m2)
m1
m2
m1
m1 <- matrix(1:9, 3, 3)
m1
m2
cppMatrixMinusMatrix(m1, m2)
m1
m2 <- matrix(1:9, 3, 3)
cppMatrixMinusMatrix(m1, m2)
m1
m2 <- matrix(rep(1, 9), 3, 3)
cppMatrixMinusMatrix(m1, m2)
cppMatrixMinusMatrix(m1, m1)
library(QuasarFitCuda)
cppMatrixMinusMatrix(m1, m2)
m1
cppMatrixMinusMatrix(m1, m2)
library(QuasarFitCuda)
cppMatrixMinusMatrix(m1, m2)
m1
library(QuasarFitCuda)
library(QuasarFitCuda)
library(QuasarFitCuda)
library(QuasarFitCuda)
m
m1
m <- m1
m
v < c(1, 2, 3)
v <- c(1, 2, 3)
cppMatrixMultiplyCol(m, v)
cppMatrixMultiplyCol(m, 1:4)
cppMatrixMultiplyCol(m, 8:12)
cppMatrixMultiplyCol(m, 8.5:12.5)
8.5:12.5
library(QuasarFitCuda)
library(QuasarFitCuda)
m1
m2 <- matrix(rep(1, 9), 3, 3)
cppMatrixDivideMatrix(m1, m2)
#cppMatrixDivideMatrix(m1, m2)
m1
library(QuasarFitCuda)
cppMatrixDivideMatrix(m1, m2)
m2 <- matrix(rep(0, 9), 3, 3)
cppMatrixDivideMatrix(m1, m2)
m2 <- matrix(rep(2, 9), 3, 3)
cppMatrixDivideMatrix(m1, m2)
library(QuasarFitCuda)
library(QuasarFitCuda)
library(QuasarFitCuda)
library(QuasarFitCuda)
history()
4 %% 2
5 %% 2
5 %% 3
7 %% 3
matrix(0, 4, 4)
complementMatrix <- function(sMatrix) {
cols <- ncol(sMatrix)
complementedCSize <- BLOCK_SIZE  - (cols %% BLOCK_SIZE)
complementedMatrix <- matrix(0, nrow = ASTRO_OBJ_SIZE, ncol = complementedCSize)
cbind(sMatrix, complementedMatrix)
}
BLOCK_SIZE <- 32
ASTRO_OBJ_SIZE <- 16
m <- matrix(1:(16 * 8), 16, 8)
m
complementMatrix(m)
m
m1 <- m
m2 <- m + 1
m3 <- m - 10
l <- list(m1, m2, m3)
l
l <- list(m1 = m1, m2 = m2, m3= m3)
l
lapply(l, `[[`, complementMatrix)
lapply(l, `[`, complementMatrix)
sapply(l, `[[`, complementMatrix)
apply(l, `[[`, complementMatrix)
lapply(l, `[[`, complementMatrix)
lapply(l, `[[`)
lapply(l, `[[`, 1)
lapply(l, complementMatrix)
View(l)
l[["m2"]]
l$m1
l$m2
l$m3
lapply(l, complementMatrix)
lks
ls
ls()
readLines('quasar_list')
readLines('quasar_list')
readLines('quasar_list')[1]
readLines('quasar_list')[[1]]
library(QuasarFitCuda)
r <- readLines('quasar_list')
fp <- file.path('spectra', r)
fp
loadQuasarsFromFolder <- function(folder, datafile) {
quasarFiles <- readLines(datafile)
files <- file.path(folder, quasarFiles)
quasars <- lapply(files, getQuasarInfo)
}
getQuasarInfo
loadQuasarsFromFolder <- function(folder, datafile) {
quasarFiles <- readLines(datafile)
files <- file.path(folder, quasarFiles)
quasars <- lapply(files, readQuasarInfo)
}
readQuasarInfo <- function(filepath) {
# since we need first header, is the best choise
fitFile <- readFITS(filepath, hdu = 1)
headerInfo <- getHeaderInfo(fitFile)
imageInfo <- getImageInfo(fitFile)
# restoring lambda from params
lambda <- restoreLambda(length(imageInfo$flux), as.double(headerInfo$a), as.double(headerInfo$b))
imageInfo$lambda <- lambda
list(specs=headerInfo, values=imageInfo)
}
fp
qs <- lapply(fp, readQuasarInfo)
#qs <- lapply(fp, readQuasarInfo)
library(FITSio)
qs <- lapply(fp, readQuasarInfo)
extractFITSHeaderValue <- function(header, key) {
valueIndex <- which(header == key)
return(header[valueIndex + 1])
}
qs <- lapply(fp, readQuasarInfo)
qs
readQuasarInfo <- function(filepath) {
# since we need first header, is the best choise
fitFile <- readFITS(filepath, hdu = 1)
headerInfo <- getHeaderInfo(fitFile)
imageInfo <- getImageInfo(fitFile)
# restoring lambda from params
#lambda <- restoreLambda(length(imageInfo$flux), as.double(headerInfo$a), as.double(headerInfo$b))
#imageInfo$lambda <- lambda
list(specs=headerInfo, values=imageInfo)
}
qs <- lapply(fp, readQuasarInfo)
qs
qs[[1]]
summary(qs[[1]])
q1 <- qs[[1]]
length(q1$values$flux)
q1 <- qs[['values$flux']]
qs[['values$flux']]
qs[[1]][['values$flux']]
qs[[1]][['values']]
qs[[1]][['values']][['flux']]
library(QuasarFitCuda)
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
quasars[[1]]$specs
quasars[[1]]$values
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
View(quasars)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
source('~/RStudio/QuasarFitCuda/R/loadQuasars.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
dataM
length(dataM)
length(quasars[[1]]$flux)
length(quasars[[2]]$flux)
source('~/RStudio/QuasarFitCuda/R/loadQuasars.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
sMatrix
debugSource('~/RStudio/QuasarFitCuda/R/loadQuasars.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
rows
dim(sMatrix)
dim(fluxMatrix)
fluxMatrix[1:5, 1:5]
fluxMatrix[1:5,]
fluxMatrix[1:5]
fluxMatrix[,1:5]
library(QuasarFitCuda)
library(QuasarFitCuda)
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
params
source('~/RStudio/QuasarFitCuda/R/loadData.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
params
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
params
params
#list(params, rep(0.))
dm <- list(0, 0, 0, 0)
dm
dm <- list(rep(0, 4))
dm
params
rep(dm, 4)
list(params, rep(dm, 4))
params
listlist
c(params, rep(dm, 4))
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
params
library(QuasarFitCuda)
source('~/RStudio/QuasarFitCuda/R/loadQuasars.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
library(QuasarFitCuda)
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
debugSource('~/RStudio/QuasarFitCuda/cudaFitting.R')
