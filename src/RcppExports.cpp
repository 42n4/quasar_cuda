// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cppMatrixLog10
SEXP cppMatrixLog10(Rcpp::NumericMatrix inputMatrix);
RcppExport SEXP _QuasarFitCuda_cppMatrixLog10(SEXP inputMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type inputMatrix(inputMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixLog10(inputMatrix));
    return rcpp_result_gen;
END_RCPP
}
// cppMatrixAddScalar
SEXP cppMatrixAddScalar(Rcpp::NumericMatrix inputMatrix, double scalar);
RcppExport SEXP _QuasarFitCuda_cppMatrixAddScalar(SEXP inputMatrixSEXP, SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type scalar(scalarSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixAddScalar(inputMatrix, scalar));
    return rcpp_result_gen;
END_RCPP
}
// cppMatrixMinusMatrix
SEXP cppMatrixMinusMatrix(Rcpp::NumericMatrix& inputMatrix, Rcpp::NumericMatrix& substrahendMatrix);
RcppExport SEXP _QuasarFitCuda_cppMatrixMinusMatrix(SEXP inputMatrixSEXP, SEXP substrahendMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type substrahendMatrix(substrahendMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixMinusMatrix(inputMatrix, substrahendMatrix));
    return rcpp_result_gen;
END_RCPP
}
// cppMatrixDivideMatrix
SEXP cppMatrixDivideMatrix(Rcpp::NumericMatrix& inputMatrix, Rcpp::NumericMatrix& divisorMatrix);
RcppExport SEXP _QuasarFitCuda_cppMatrixDivideMatrix(SEXP inputMatrixSEXP, SEXP divisorMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type divisorMatrix(divisorMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixDivideMatrix(inputMatrix, divisorMatrix));
    return rcpp_result_gen;
END_RCPP
}
// cppMatrixMultiplyCol
SEXP cppMatrixMultiplyCol(Rcpp::NumericMatrix& inputMatrix, Rcpp::NumericVector& vector);
RcppExport SEXP _QuasarFitCuda_cppMatrixMultiplyCol(SEXP inputMatrixSEXP, SEXP vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type vector(vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixMultiplyCol(inputMatrix, vector));
    return rcpp_result_gen;
END_RCPP
}
// cppMatrixTranspose
SEXP cppMatrixTranspose(Rcpp::NumericMatrix inputMatrix);
RcppExport SEXP _QuasarFitCuda_cppMatrixTranspose(SEXP inputMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type inputMatrix(inputMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatrixTranspose(inputMatrix));
    return rcpp_result_gen;
END_RCPP
}
// cppMovingAverage
NumericMatrix cppMovingAverage(const NumericMatrix& inputMatrix, const IntegerVector& colsSizeVector, uint windowSize);
RcppExport SEXP _QuasarFitCuda_cppMovingAverage(SEXP inputMatrixSEXP, SEXP colsSizeVectorSEXP, SEXP windowSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colsSizeVector(colsSizeVectorSEXP);
    Rcpp::traits::input_parameter< uint >::type windowSize(windowSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMovingAverage(inputMatrix, colsSizeVector, windowSize));
    return rcpp_result_gen;
END_RCPP
}
// cppGenerateWavelenghtMatrix
NumericMatrix cppGenerateWavelenghtMatrix(SEXP params);
RcppExport SEXP _QuasarFitCuda_cppGenerateWavelenghtMatrix(SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(cppGenerateWavelenghtMatrix(params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QuasarFitCuda_cppMatrixLog10", (DL_FUNC) &_QuasarFitCuda_cppMatrixLog10, 1},
    {"_QuasarFitCuda_cppMatrixAddScalar", (DL_FUNC) &_QuasarFitCuda_cppMatrixAddScalar, 2},
    {"_QuasarFitCuda_cppMatrixMinusMatrix", (DL_FUNC) &_QuasarFitCuda_cppMatrixMinusMatrix, 2},
    {"_QuasarFitCuda_cppMatrixDivideMatrix", (DL_FUNC) &_QuasarFitCuda_cppMatrixDivideMatrix, 2},
    {"_QuasarFitCuda_cppMatrixMultiplyCol", (DL_FUNC) &_QuasarFitCuda_cppMatrixMultiplyCol, 2},
    {"_QuasarFitCuda_cppMatrixTranspose", (DL_FUNC) &_QuasarFitCuda_cppMatrixTranspose, 1},
    {"_QuasarFitCuda_cppMovingAverage", (DL_FUNC) &_QuasarFitCuda_cppMovingAverage, 3},
    {"_QuasarFitCuda_cppGenerateWavelenghtMatrix", (DL_FUNC) &_QuasarFitCuda_cppGenerateWavelenghtMatrix, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_QuasarFitCuda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
